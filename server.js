const http = require('http');
const fs = require('fs');
const path = require('path');
const url = require('url');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 1609;
const HOST = '0.0.0.0';

// MIME —Ç–∏–ø–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
const mimeTypes = {
  '.html': 'text/html',
  '.js': 'text/javascript',
  '.css': 'text/css',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpeg',
  '.jpeg': 'image/jpeg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.ico': 'image/x-icon',
  '.webp': 'image/webp',
  '.woff': 'font/woff',
  '.woff2': 'font/woff2',
  '.ttf': 'font/ttf',
  '.eot': 'application/vnd.ms-fontobject'
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤
function handleRequest(req, res) {
  const parsedUrl = url.parse(req.url);
  let pathname = parsedUrl.pathname;
  
  // –Ø–∫—â–æ –∑–∞–ø–∏—Ç –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ index.html
  if (pathname === '/') {
    pathname = '/index.html';
  }
  
  // –ü–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
  const filePath = path.join(__dirname, pathname);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
  fs.access(filePath, fs.constants.F_OK, (err) => {
    if (err) {
      // –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 404
      res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
      res.end(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>404 - –°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞</title>
          <meta charset="utf-8">
          <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            h1 { color: #dc3545; }
            p { color: #666; }
            a { color: #007bff; text-decoration: none; }
          </style>
        </head>
        <body>
          <h1>404 - –°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞</h1>
          <p>–ó–∞–ø–∏—Ç—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: ${pathname}</p>
          <a href="/">‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—É</a>
        </body>
        </html>
      `);
      return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    const ext = path.extname(filePath).toLowerCase();
    const contentType = mimeTypes[ext] || 'text/plain';
    
    // –ß–∏—Ç–∞—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª
    fs.readFile(filePath, (err, data) => {
      if (err) {
        res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' });
        res.end(`
          <!DOCTYPE html>
          <html>
          <head>
            <title>500 - –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</title>
            <meta charset="utf-8">
            <style>
              body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
              h1 { color: #dc3545; }
              p { color: #666; }
            </style>
          </head>
          <body>
            <h1>500 - –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h1>
            <p>–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª: ${pathname}</p>
          </body>
          </html>
        `);
        return;
      }
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CORS (–¥–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∏ –∑ –±—É–¥—å-—è–∫–æ–≥–æ –¥–æ–º–µ–Ω—É)
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª
      res.writeHead(200, { 'Content-Type': contentType });
      res.end(data);
    });
  });
}

// –°—Ç–≤–æ—Ä—é—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(handleRequest);

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, HOST, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://${HOST}:${PORT}`);
  console.log(`üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://localhost:${PORT}`);
  console.log(`üîß –î–ª—è –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C`);
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (err) => {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
  if (err.code === 'EADDRINUSE') {
    console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –ø–æ—Ä—Ç.`);
  }
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.');
    process.exit(0);
  });
});

process.on('SIGTERM', () => {
  console.log('üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
    process.exit(0);
  });
});