/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */

/**
 * –ü–æ–∫–∞–∑—É—î/–ø—Ä–∏—Ö–æ–≤—É—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 * @param {boolean} show - –ø–æ–∫–∞–∑–∞—Ç–∏ —á–∏ –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏
 */
function showLoading(show) {
    const loadingElement = document.getElementById('loading');
    const resultsElement = document.getElementById('results');
    const analyzeBtn = document.getElementById('analyzeBtn');
    
    if (loadingElement) {
        loadingElement.style.display = show ? 'block' : 'none';
    }
    
    if (resultsElement && show) {
        resultsElement.style.display = 'none';
    }
    
    if (analyzeBtn) {
        analyzeBtn.disabled = show;
        analyzeBtn.textContent = show ? '‚è≥ –ê–Ω–∞–ª—ñ–∑—É—î–º–æ...' : 'üîç –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É';
    }
}

/**
 * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
 * @param {string} message - —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
 */
function showError(message) {
    const resultsElement = document.getElementById('results');
    if (!resultsElement) return;
    
    const errorHtml = `
        <div class="error-message">
            <h3>‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
            <p>${message}</p>
            <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #f5c6cb;">
                <h4>üí° –©–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏:</h4>
                <ul style="text-align: left; margin: 10px 0; padding-left: 20px;">
                    <li>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å URL</li>
                    <li>–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ (–ø—Ä–æ–±–ª–µ–º–∏ –∑ CORS)</li>
                    <li>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ VPN –∞–±–æ –ø—Ä–æ–∫—Å—ñ</li>
                    <li>–°–∫–æ–ø—ñ—é–π—Ç–µ HTML –∫–æ–¥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤—Ä—É—á–Ω—É</li>
                </ul>
            </div>
        </div>
    `;
    
    resultsElement.innerHTML = errorHtml;
    resultsElement.style.display = 'block';
    resultsElement.scrollIntoView({ behavior: 'smooth' });
}

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
 * @param {Object} analysis - —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
 * @param {string} category - –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–æ–≤–∞—Ä—É
 */
function displayResults(analysis, category) {
    const resultsElement = document.getElementById('results');
    if (!resultsElement) return;
    
    const { images, specs, description } = analysis;
    
    const html = `
        <h2>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É</h2>
        <p style="text-align: center; margin-bottom: 30px; color: #666; font-size: 1.1em;">
            –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: <strong>${getCategoryDisplayName(category)}</strong>
        </p>
        
        ${generateStatsGrid(images, specs, description)}
        ${generateAnalysisDetails(images, specs, description)}
        ${generateRecommendations(images, specs, description)}
    `;
    
    resultsElement.innerHTML = html;
    resultsElement.style.display = 'block';
    resultsElement.scrollIntoView({ behavior: 'smooth' });
    
    // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó
    addResultAnimations();
}

/**
 * –ì–µ–Ω–µ—Ä—É—î —Å—ñ—Ç–∫—É –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
 * @param {Object} images - –¥–∞–Ω—ñ –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param {Object} specs - –¥–∞–Ω—ñ –ø—Ä–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
 * @param {Object} description - –¥–∞–Ω—ñ –ø—Ä–æ –æ–ø–∏—Å
 * @returns {string} - HTML –∫–æ–¥ —Å—ñ—Ç–∫–∏
 */
function generateStatsGrid(images, specs, description) {
    return `
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number">${formatNumber(images.total)}</div>
                <div class="stat-label">–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${specs.completeness}%</div>
                <div class="stat-label">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${formatNumber(description.words)}</div>
                <div class="stat-label">–°–ª—ñ–≤ –≤ –æ–ø–∏—Å—ñ</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${description.paragraphs}</div>
                <div class="stat-label">–†–æ–∑–¥—ñ–ª—ñ–≤</div>
            </div>
        </div>
    `;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–Ω–∞–ª—ñ–∑
 * @param {Object} images - –¥–∞–Ω—ñ –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param {Object} specs - –¥–∞–Ω—ñ –ø—Ä–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏  
 * @param {Object} description - –¥–∞–Ω—ñ –ø—Ä–æ –æ–ø–∏—Å
 * @returns {string} - HTML –∫–æ–¥ –¥–µ—Ç–∞–ª–µ–π
 */
function generateAnalysisDetails(images, specs, description) {
    return `
        <div class="analysis-details">
            ${generateImageDetails(images)}
            ${generateSpecsDetails(specs)}
            ${generateDescriptionDetails(description)}
        </div>
    `;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –¥–µ—Ç–∞–ª—ñ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
 * @param {Object} images - –¥–∞–Ω—ñ –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @returns {string} - HTML –∫–æ–¥
 */
function generateImageDetails(images) {
    const statusBadge = getStatusBadge(images.status);
    const minRecommended = ANALYSIS_CONFIG.images.minRecommended;
    
    let additionalInfo = '';
    if (images.total === 0) {
        additionalInfo = '<p style="color: #721c24; margin-top: 10px;">‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–æ–≤–∞—Ä—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É.</p>';
    } else if (images.total < minRecommended) {
        additionalInfo = `<p style="color: #856404; margin-top: 10px;">‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –º–∞—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ ${minRecommended} —è–∫—ñ—Å–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–æ–≤–∞—Ä—É</p>`;
    } else {
        additionalInfo = '<p style="color: #155724; margin-top: 10px;">‚úÖ –î–æ—Å—Ç–∞—Ç–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π –¥–ª—è —è–∫—ñ—Å–Ω–æ–≥–æ –ø–æ–∫–∞–∑—É —Ç–æ–≤–∞—Ä—É</p>';
    }
    
    return `
        <div class="detail-card">
            <h3>üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–æ–≤–∞—Ä—É ${statusBadge}</h3>
            <p><strong>${images.message}</strong></p>
            ${additionalInfo}
            ${images.images.length > 0 ? generateImagePreview(images.images) : ''}
        </div>
    `;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –¥–µ—Ç–∞–ª—ñ –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
 * @param {Object} specs - –¥–∞–Ω—ñ –ø—Ä–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
 * @returns {string} - HTML –∫–æ–¥
 */
function generateSpecsDetails(specs) {
    const statusBadge = getStatusBadge(specs.status);
    
    let foundSection = '';
    if (specs.found.length > 0) {
        foundSection = `
            <div style="margin-top: 20px;">
                <h4 style="color: #155724; margin-bottom: 10px;">‚úÖ –ó–Ω–∞–π–¥–µ–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (${specs.found.length}):</h4>
                <div class="spec-grid">
                    ${specs.found.map(spec => `<div class="spec-item spec-found">‚úì ${spec}</div>`).join('')}
                </div>
            </div>
        `;
    }
    
    let missingSection = '';
    if (specs.missing.length > 0) {
        missingSection = `
            <div style="margin-top: 20px;">
                <h4 style="color: #721c24; margin-bottom: 10px;">‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (${specs.missing.length}):</h4>
                <div class="spec-grid">
                    ${specs.missing.map(spec => `<div class="spec-item spec-missing">‚úó ${spec}</div>`).join('')}
                </div>
            </div>
        `;
    }
    
    return `
        <div class="detail-card">
            <h3>‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—É ${statusBadge}</h3>
            <p><strong>${specs.message}</strong></p>
            ${generateProgressBar(specs.completeness)}
            ${foundSection}
            ${missingSection}
        </div>
    `;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –¥–µ—Ç–∞–ª—ñ –¥–ª—è –æ–ø–∏—Å—É
 * @param {Object} description - –¥–∞–Ω—ñ –ø—Ä–æ –æ–ø–∏—Å
 * @returns {string} - HTML –∫–æ–¥
 */
function generateDescriptionDetails(description) {
    const statusBadge = getStatusBadge(description.status);
    const recommendedWords = ANALYSIS_CONFIG.description.recommendedWords;
    
    let additionalInfo = '';
    if (description.words === 0) {
        additionalInfo = '<p style="color: #721c24; margin-top: 10px;">‚ùå –û–ø–∏—Å —Ç–æ–≤–∞—Ä—É –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –π–æ–≥–æ –∑–Ω–∞–π—Ç–∏</p>';
    } else if (description.words < recommendedWords) {
        additionalInfo = `<p style="color: #856404; margin-top: 10px;">‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –æ–ø–∏—Å –¥–æ ${recommendedWords} —Å–ª—ñ–≤ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ SEO</p>`;
    } else {
        additionalInfo = '<p style="color: #155724; margin-top: 10px;">‚úÖ –î–µ—Ç–∞–ª—å–Ω–∏–π —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É</p>';
    }
    
    const stats = `
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 10px; margin: 15px 0; padding: 15px; background: #f8f9fa; border-radius: 8px;">
            <div style="text-align: center;">
                <div style="font-size: 1.5em; font-weight: bold; color: #667eea;">${formatNumber(description.words)}</div>
                <div style="font-size: 0.8em; color: #666;">–°–ª—ñ–≤</div>
            </div>
            <div style="text-align: center;">
                <div style="font-size: 1.5em; font-weight: bold; color: #667eea;">${description.paragraphs}</div>
                <div style="font-size: 0.8em; color: #666;">–†–æ–∑–¥—ñ–ª—ñ–≤</div>
            </div>
            <div style="text-align: center;">
                <div style="font-size: 1.5em; font-weight: bold; color: #667eea;">${description.images}</div>
                <div style="font-size: 0.8em; color: #666;">–ó–æ–±—Ä–∞–∂–µ–Ω—å</div>
            </div>
            <div style="text-align: center;">
                <div style="font-size: 1.5em; font-weight: bold; color: #667eea;">${description.headings}</div>
                <div style="font-size: 0.8em; color: #666;">–ó–∞–≥–æ–ª–æ–≤–∫—ñ–≤</div>
            </div>
        </div>
    `;
    
    return `
        <div class="detail-card">
            <h3>üìù –û–ø–∏—Å —Ç–æ–≤–∞—Ä—É ${statusBadge}</h3>
            <p><strong>${description.message}</strong></p>
            ${stats}
            ${additionalInfo}
        </div>
    `;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
 * @param {Object} images - –¥–∞–Ω—ñ –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param {Object} specs - –¥–∞–Ω—ñ –ø—Ä–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
 * @param {Object} description - –¥–∞–Ω—ñ –ø—Ä–æ –æ–ø–∏—Å
 * @returns {string} - HTML –∫–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
 */
function generateRecommendations(images, specs, description) {
    const recommendations = [];
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
    if (images.status !== STATUS_TYPES.SUCCESS) {
        if (images.total === 0) {
            recommendations.push('üì∏ –î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó');
        } else if (images.total < ANALYSIS_CONFIG.images.minRecommended) {
            recommendations.push(`üì∏ –î–æ–¥–∞–π—Ç–µ —â–µ ${ANALYSIS_CONFIG.images.minRecommended - images.total} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø–æ–∫–∞–∑—É —Ç–æ–≤–∞—Ä—É`);
        }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    if (specs.missing.length > 0) {
        recommendations.push(`‚öôÔ∏è –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${specs.missing.slice(0, 3).join(', ')}${specs.missing.length > 3 ? ' —Ç–∞ —ñ–Ω—à—ñ' : ''}`);
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –æ–ø–∏—Å—É
    if (description.words < ANALYSIS_CONFIG.description.recommendedWords) {
        const needed = ANALYSIS_CONFIG.description.recommendedWords - description.words;
        recommendations.push(`üìù –†–æ–∑—à–∏—Ä—Ç–µ –æ–ø–∏—Å –Ω–∞ ${needed} —Å–ª—ñ–≤ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ SEO —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ`);
    }
    
    if (recommendations.length === 0) {
        recommendations.push('üéâ –í—ñ–¥–º—ñ–Ω–Ω–æ! –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ç–æ–≤–∞—Ä—É –º–∞—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏');
    }
    
    return `
        <div class="detail-card" style="border-left: 4px solid #ffc107;">
            <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è</h3>
            <ul style="margin: 15px 0; padding-left: 20px;">
                ${recommendations.map(rec => `<li style="margin: 8px 0;">${rec}</li>`).join('')}
            </ul>
        </div>
    `;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –∑–Ω–∞—á–æ–∫ —Å—Ç–∞—Ç—É—Å—É
 * @param {string} status - —Å—Ç–∞—Ç—É—Å
 * @returns {string} - HTML –∑–Ω–∞—á–æ–∫
 */
function getStatusBadge(status) {
    const badges = {
        [STATUS_TYPES.SUCCESS]: '<span class="status-badge status-success">‚úÖ –í—ñ–¥–º—ñ–Ω–Ω–æ</span>',
        [STATUS_TYPES.WARNING]: '<span class="status-badge status-warning">‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏</span>',
        [STATUS_TYPES.ERROR]: '<span class="status-badge status-error">‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ</span>'
    };
    return badges[status] || '';
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
 * @param {number} percentage - –≤—ñ–¥—Å–æ—Ç–æ–∫ (0-100)
 * @returns {string} - HTML –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É
 */
function generateProgressBar(percentage) {
    const color = percentage >= 80 ? '#28a745' : percentage >= 50 ? '#ffc107' : '#dc3545';
    
    return `
        <div style="margin: 15px 0;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                <span>–ó–∞–ø–æ–≤–Ω–µ–Ω—ñ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</span>
                <span style="font-weight: bold;">${percentage}%</span>
            </div>
            <div style="background: #e9ecef; border-radius: 10px; height: 10px; overflow: hidden;">
                <div style="background: ${color}; height: 100%; width: ${percentage}%; transition: width 0.5s ease;"></div>
            </div>
        </div>
    `;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –ø—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω—å
 * @param {Array} images - –º–∞—Å–∏–≤ URL –∑–æ–±—Ä–∞–∂–µ–Ω—å
 * @returns {string} - HTML –ø—Ä–µ–≤—å—é
 */
function generateImagePreview(images) {
    const previewImages = images.slice(0, 5); // –ü–æ–∫–∞–∑—É—î–º–æ –º–∞–∫—Å–∏–º—É–º 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å
    
    return `
        <div style="margin-top: 15px;">
            <h5 style="margin-bottom: 10px; color: #666;">–ó–Ω–∞–π–¥–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:</h5>
            <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                ${previewImages.map(img => `
                    <div style="width: 60px; height: 60px; border: 1px solid #ddd; border-radius: 4px; overflow: hidden; position: relative;">
                        <img src="${img}" alt="–¢–æ–≤–∞—Ä" style="width: 100%; height: 100%; object-fit: cover;" 
                             onerror="this.parentElement.innerHTML='<div style=\\'display:flex;align-items:center;justify-content:center;height:100%;font-size:12px;color:#999\\'>‚ùå</div>'">
                    </div>
                `).join('')}
                ${images.length > 5 ? `<div style="display: flex; align-items: center; font-size: 0.9em; color: #666;">+${images.length - 5} —â–µ</div>` : ''}
            </div>
        </div>
    `;
}

/**
 * –û—Ç—Ä–∏–º—É—î –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param {string} category - –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
 * @returns {string} - –Ω–∞–∑–≤–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
function getCategoryDisplayName(category) {
    return CATEGORY_NAMES[category] || 'üîç –ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ';
}

/**
 * –î–æ–¥–∞—î –∞–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
 */
function addResultAnimations() {
    const cards = document.querySelectorAll('.stat-card, .detail-card');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            card.style.transition = 'all 0.5s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 100);
    });
}

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è UI
 */
function initializeUI() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ URL
    const urlInput = document.getElementById('urlInput');
    if (urlInput) {
        urlInput.addEventListener('paste', function() {
            setTimeout(() => {
                const url = this.value.trim();
                if (isValidUrl(url)) {
                    const analyzeBtn = document.getElementById('analyzeBtn');
                    if (analyzeBtn) {
                        analyzeBtn.style.background = 'linear-gradient(45deg, #28a745, #20c997)';
                        analyzeBtn.textContent = 'üöÄ –ì–æ—Ç–æ–≤–æ –¥–æ –∞–Ω–∞–ª—ñ–∑—É!';
                    }
                }
            }, 100);
        });
        
        // –°–∫–∏–¥–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –ø–æ–ª—è
        urlInput.addEventListener('input', function() {
            const analyzeBtn = document.getElementById('analyzeBtn');
            if (analyzeBtn && !this.value.trim()) {
                analyzeBtn.style.background = 'linear-gradient(45deg, #667eea, #764ba2)';
                analyzeBtn.textContent = 'üîç –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É';
            }
        });
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥—É
    if (urlInput) {
        urlInput.focus();
    }
}

/**
 * –ü–æ–∫–∞–∑—É—î –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
 * @param {string} message - —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param {string} type - —Ç–∏–ø –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (success, warning, error)
 * @param {number} duration - —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ–∫–∞–∑—É –≤ –º—Å
 */
function showNotification(message, type = 'info', duration = 3000) {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    let container = document.getElementById('notifications-container');
    if (!container) {
        container = document.createElement('div');
        container.id = 'notifications-container';
        container.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            max-width: 400px;
        `;
        document.body.appendChild(container);
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    const notification = document.createElement('div');
    notification.style.cssText = `
        background: white;
        border-left: 4px solid ${type === 'success' ? '#28a745' : type === 'warning' ? '#ffc107' : type === 'error' ? '#dc3545' : '#17a2b8'};
        padding: 15px 20px;
        margin-bottom: 10px;
        border-radius: 4px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateX(100%);
        transition: transform 0.3s ease;
        font-size: 14px;
        line-height: 1.4;
    `;
    
    const icon = type === 'success' ? '‚úÖ' : type === 'warning' ? '‚ö†Ô∏è' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è';
    notification.innerHTML = `<strong>${icon}</strong> ${message}`;
    
    container.appendChild(notification);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 10);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏—Ö–æ–≤–∞–Ω–Ω—è
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, duration);
}

/**
 * –°—Ç–≤–æ—Ä—é—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –¥–µ—Ç–∞–ª—è–º–∏
 * @param {string} title - –∑–∞–≥–æ–ª–æ–≤–æ–∫
 * @param {string} content - –∫–æ–Ω—Ç–µ–Ω—Ç
 */
function showModal(title, content) {
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ, —è–∫—â–æ —î
    const existingModal = document.getElementById('details-modal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'details-modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 2000;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    `;
    
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: white;
        border-radius: 15px;
        padding: 30px;
        max-width: 80%;
        max-height: 80%;
        overflow-y: auto;
        position: relative;
        transform: scale(0.9);
        transition: transform 0.3s ease;
    `;
    
    modalContent.innerHTML = `
        <button onclick="document.getElementById('details-modal').remove()" 
                style="position: absolute; top: 15px; right: 15px; background: none; border: none; font-size: 24px; cursor: pointer; color: #999;">√ó</button>
        <h2 style="margin-bottom: 20px; color: #333;">${title}</h2>
        <div>${content}</div>
    `;
    
    modal.appendChild(modalContent);
    document.body.appendChild(modal);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
    setTimeout(() => {
        modal.style.opacity = '1';
        modalContent.style.transform = 'scale(1)';
    }, 10);
    
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –∫–ª—ñ–∫—É –Ω–∞ —Ñ–æ–Ω
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
    
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ Escape
    const handleEscape = (e) => {
        if (e.key === 'Escape') {
            modal.remove();
            document.removeEventListener('keydown', handleEscape);
        }
    };
    document.addEventListener('keydown', handleEscape);
}

/**
 * –ï–∫—Å–ø–æ—Ä—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –≤ JSON
 * @param {Object} analysis - —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
 * @param {string} url - URL —Å—Ç–æ—Ä—ñ–Ω–∫–∏
 */
function exportResults(analysis, url) {
    const exportData = {
        url: url,
        timestamp: new Date().toISOString(),
        category: analysis.category,
        results: {
            images: {
                total: analysis.images.total,
                status: analysis.images.status,
                message: analysis.images.message
            },
            specs: {
                completeness: analysis.specs.completeness,
                found: analysis.specs.found,
                missing: analysis.specs.missing,
                status: analysis.specs.status
            },
            description: {
                words: analysis.description.words,
                paragraphs: analysis.description.paragraphs,
                images: analysis.description.images,
                headings: analysis.description.headings,
                status: analysis.description.status
            }
        },
        recommendations: generateRecommendationsList(analysis)
    };
    
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `analysis_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    showNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ JSON —Ñ–∞–π–ª', 'success');
}

/**
 * –ì–µ–Ω–µ—Ä—É—î —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
 * @param {Object} analysis - —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
 * @returns {Array} - –º–∞—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
 */
function generateRecommendationsList(analysis) {
    const recommendations = [];
    
    if (analysis.images.status !== STATUS_TYPES.SUCCESS) {
        recommendations.push({
            type: 'images',
            priority: analysis.images.total === 0 ? 'high' : 'medium',
            message: analysis.images.message
        });
    }
    
    if (analysis.specs.missing.length > 0) {
        recommendations.push({
            type: 'specs',
            priority: analysis.specs.completeness < 50 ? 'high' : 'medium',
            message: `–î–æ–¥–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${analysis.specs.missing.join(', ')}`
        });
    }
    
    if (analysis.description.words < ANALYSIS_CONFIG.description.recommendedWords) {
        recommendations.push({
            type: 'description',
            priority: analysis.description.words < ANALYSIS_CONFIG.description.minWords ? 'high' : 'low',
            message: `–†–æ–∑—à–∏—Ä–∏—Ç–∏ –æ–ø–∏—Å –¥–æ ${ANALYSIS_CONFIG.description.recommendedWords} —Å–ª—ñ–≤`
        });
    }
    
    return recommendations;
}